x Criar o projeto com .net

x Criar o .gitIgnore para o projeto .net

x RequestRefundBase
    x FuncionarioId (Guid)
    x DataSolicitacao (Datetime)
    x Valor (decimal)
    x Descrição (string)
    x Categoria (Enum: "Transporte", "Alimentação" ou "Hospedagem".)

x Criar o model RequestRefundEntity herda de RequestRefundBase
    x Id
    x CreateAt
    x UpdateAt

x Configurar o bd para o sqlite, fazendo as configurações devidas inclusive atualização de data de criação e de atualização e fazendo as migrations das entities

x Instalar e configurar MediatR

x Instalar e configurar FluentValidation

x RefundDtoCommand que faz uso do IRequest do MediatR e herda de RequestRefundBase

x Criar o RefundDtoCommandValidator que usa como base RefundDtoCommand as regras são
    x FuncionarioId (Obrigatorio)
    x Valor (Obrigatorio, não pode ser maior que 500 e nem menor que 1000)
    x Descrição (Se categoria for Hospedagem a descrição é obrigatorio (Se isso não for possivel penso em outro tipo de validação condicional)) 
    x Categoria (Obrigatorio, validação do Enum) 

x Criar o ValidationBehavior

x Criar o RefundDtoCommandHandle que não retorna nada e usa o RefundDtoCommand e implementar o handle do MediatR 
    x Salva o dado enviado no bd na tabela de RequestRefund

x Criar Controller com um endpoint POST /reembolsos
    x Recebe do Front um RefundDtoCommand e repassar para o Send
    x Retornar 200 se deu certo
    x Retornar badRequest se deu erro generico

- Tentar burlar as regras para ver o que acontece